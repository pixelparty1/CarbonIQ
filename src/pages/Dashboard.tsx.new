import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Navigation } from "@/components/Navigation";
import { DashboardChart } from "@/components/DashboardChart";
import { Badge } from "@/components/ui/badge";
import { LeaderboardCard } from "@/components/LeaderboardCard";
import { Leaf, TrendingDown, BarChart3, Globe2, Award, Upload, TrendingUp, Car, Zap } from "lucide-react";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { Progress } from "@/components/ui/progress";

export default function Dashboard() {
  // State
  const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);
  const [currentEmissions] = useState(387); // tons CO2
  const [allowedLimit] = useState(500);
  const [creditsLeft] = useState(113);
  const progressPercentage = (currentEmissions / allowedLimit) * 100;

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const newFiles = Array.from(files).map(file => file.name);
      setUploadedFiles(prev => [...prev, ...newFiles]);
    }
  };

  const carbonData = {
    series: [
      {
        name: "Carbon Emissions",
        data: [30, 40, 35, 50, 49, 60, 70, 91, 125, 150],
      },
    ],
    categories: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct"],
  };

  const options = {
    chart: {
      type: "area",
      toolbar: {
        show: false,
      },
      animations: {
        enabled: true,
      },
    },
    stroke: {
      curve: "smooth",
      width: 2,
    },
    fill: {
      type: "gradient",
      gradient: {
        shadeIntensity: 1,
        opacityFrom: 0.45,
        opacityTo: 0.05,
        stops: [50, 100, 100],
        colorStops: [
          {
            offset: 0,
            color: "#22c55e",
            opacity: 1
          },
          {
            offset: 100,
            color: "#22c55e",
            opacity: 0
          }
        ]
      }
    },
    grid: {
      borderColor: "#333",
      strokeDashArray: 3,
    },
    colors: ["#22c55e"],
    xaxis: {
      categories: carbonData.categories,
      labels: {
        style: {
          colors: "#888",
        },
      },
    },
    yaxis: {
      labels: {
        style: {
          colors: "#888",
        },
      },
    },
  };

  const stats = [
    {
      title: "Total CO₂ Offset",
      value: "1,234",
      unit: "tons",
      change: "-12%",
      icon: Leaf,
    },
    {
      title: "Monthly Reduction",
      value: "23.5",
      unit: "tons",
      change: "-8%",
      icon: TrendingDown,
    },
    {
      title: "Carbon Credits",
      value: "145",
      unit: "credits",
      change: "+5",
      icon: Award,
    },
  ];

  const leaderboardData = {
    rank: 1,
    company: {
      id: "1",
      name: "EcoTech Solutions",
      location: "San Francisco, CA",
      industry: "Technology",
      employees: 500,
      emissions: 1234,
      reduction: 12,
      target: 25,
      verified: true
    },
    index: 0
  };

  return (
    <div className="min-h-screen bg-black">
      <Navigation />
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-3xl font-bold text-white">Dashboard</h1>
          <Badge variant="outline" className="bg-zinc-900">
            <Globe2 className="w-4 h-4 mr-1" />
            Live CO₂ Data
          </Badge>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {stats.map((stat, index) => (
            <Card key={index} className="bg-zinc-900 border-zinc-800">
              <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium text-zinc-200">
                  {stat.title}
                </CardTitle>
                <stat.icon className="h-4 w-4 text-zinc-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-white">
                  {stat.value}
                  <span className="text-sm font-normal text-zinc-400 ml-1">
                    {stat.unit}
                  </span>
                </div>
                <p className="text-xs text-zinc-500 mt-1">
                  <span className={stat.change.startsWith("-") ? "text-green-500" : "text-blue-500"}>
                    {stat.change}
                  </span>
                  {" "}vs last month
                </p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Main Chart */}
        <Card className="bg-zinc-900 border-zinc-800 mb-8">
          <CardHeader>
            <CardTitle className="text-lg text-white">Carbon Emissions Overview</CardTitle>
          </CardHeader>
          <CardContent>
            <DashboardChart
              type="area"
              height={350}
              options={options}
              series={carbonData.series}
            />
          </CardContent>
        </Card>

        {/* Bottom Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Recent Activity */}
          <Card className="bg-zinc-900 border-zinc-800">
            <CardHeader>
              <CardTitle className="text-lg text-white">Recent Activity</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {[1, 2, 3].map((_, i) => (
                <div key={i} className="flex items-center gap-4 p-3 rounded-lg bg-zinc-800/50">
                  <div className="p-2 rounded-full bg-green-500/10">
                    <BarChart3 className="h-4 w-4 text-green-500" />
                  </div>
                  <div>
                    <p className="text-sm text-zinc-200">Carbon offset verified</p>
                    <p className="text-xs text-zinc-500">2 hours ago</p>
                  </div>
                  <Badge variant="outline" className="ml-auto">
                    +5 credits
                  </Badge>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Leaderboard Preview */}
          <LeaderboardCard {...leaderboardData} />

          {/* Upload Section */}
          <motion.div
            initial={{ opacity: 0, x: -30 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.1, duration: 0.6 }}
          >
            <Card className="bg-zinc-900 border-zinc-800">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2 text-white">
                  <Upload className="h-5 w-5" />
                  <span>Upload Bills</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="border-2 border-dashed border-zinc-800 rounded-lg p-6 text-center hover:border-green-500/50 transition-colors">
                  <input
                    type="file"
                    multiple
                    accept=".pdf,.jpg,.png,.xlsx"
                    onChange={handleFileUpload}
                    className="hidden"
                    id="file-upload"
                  />
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <Upload className="h-8 w-8 mx-auto mb-2 text-zinc-500" />
                    <p className="text-sm text-zinc-500">
                      Drop files here or click to upload
                    </p>
                  </label>
                </div>
                
                {uploadedFiles.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium text-zinc-200">Recent uploads:</p>
                    {uploadedFiles.slice(-3).map((file, index) => (
                      <div key={index} className="flex items-center space-x-2 text-sm text-zinc-400">
                        <div className="w-2 h-2 bg-green-500 rounded-full" />
                        <span className="truncate">{file}</span>
                      </div>
                    ))}
                  </div>
                )}
                
                <Button className="w-full bg-green-500 hover:bg-green-600">
                  Analyze Emissions
                </Button>
              </CardContent>
            </Card>
          </motion.div>

          {/* Status Card */}
          <motion.div
            initial={{ opacity: 0, x: 30 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2, duration: 0.6 }}
          >
            <Card className="bg-zinc-900 border-zinc-800">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2 text-white">
                  <TrendingUp className="h-5 w-5" />
                  <span>Current Status</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium text-zinc-200">Annual Emissions</span>
                    <Badge variant={progressPercentage > 75 ? "destructive" : "default"}>
                      {currentEmissions}/{allowedLimit} tons CO₂
                    </Badge>
                  </div>
                  <Progress value={progressPercentage} className="h-2" />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-500">{creditsLeft}</div>
                    <div className="text-xs text-zinc-500">Credits Left</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-500">${(creditsLeft * 15).toLocaleString()}</div>
                    <div className="text-xs text-zinc-500">Market Value</div>
                  </div>
                </div>
                
                <Button className="w-full bg-blue-500 hover:bg-blue-600">
                  Buy More Credits
                </Button>
              </CardContent>
            </Card>
          </motion.div>

          {/* Quick Actions */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3, duration: 0.6 }}
            className="grid md:grid-cols-3 gap-4 lg:col-span-2"
          >
            <Card className="bg-zinc-900 border-zinc-800 p-6 text-center group cursor-pointer">
              <Zap className="h-8 w-8 text-yellow-500 mx-auto mb-3 group-hover:scale-110 transition-transform" />
              <h3 className="font-medium mb-2 text-white">Energy Audit</h3>
              <p className="text-sm text-zinc-400">Schedule assessment</p>
            </Card>
            
            <Card className="bg-zinc-900 border-zinc-800 p-6 text-center group cursor-pointer">
              <Car className="h-8 w-8 text-blue-500 mx-auto mb-3 group-hover:scale-110 transition-transform" />
              <h3 className="font-medium mb-2 text-white">Fleet Analysis</h3>
              <p className="text-sm text-zinc-400">Optimize transport</p>
            </Card>
            
            <Card className="bg-zinc-900 border-zinc-800 p-6 text-center group cursor-pointer">
              <Leaf className="h-8 w-8 text-green-500 mx-auto mb-3 group-hover:scale-110 transition-transform" />
              <h3 className="font-medium mb-2 text-white">Offset Projects</h3>
              <p className="text-sm text-zinc-400">Explore options</p>
            </Card>
          </motion.div>
        </div>
      </div>
    </div>
  );
}
